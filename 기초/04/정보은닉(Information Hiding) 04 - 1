2024/12/26

우리는 객체 생성을 목적으로 클래스를 디자인 한다. 그럼 좋은 클래스가 되기 위한 조건은 무엇일까?
그것은 '정보은닉'과 '캡슐화'이다. 알아보자.


[정보은닉의 이해]

윈도우의 그림판 프로그램을 실행하면 오른쪽 그림에서 보이는 것과 같은 다양한 형태의 도형을 그릴 수 있다. 150 페이지 그림 04 - 1
그런데 이와 유사한 성격의 프로그램을 C++ 로 구현한다고 가정해보자. 그럼 다양한 종류의 클래스를 정의해야 한다.
그리고 다음과 같이 점의 위치좌표를 표현하는 목적의 클래스는 기본적으로 필요하다.

	class Point
	{
		public:
			int x;
			int y;
	};	// 0 이상 100 이하

우리는 위의 클래스를 가지고 정보은닉에 대한 이야기를 진행하고자 한다. 일단 위의 클래스에서 멤버변수 x와 y의 범위는 0 이상 100 이하이고, 좌 상단 좌표가 [0, 0], 우 하단의 좌표가 [100, 100] 이라고 가정하자.
그리고 다음 예제를 관찰하자. 이 예제는 Point 클래스의 멤버변수가 public으로 선언되었을 때 발생할 수 있는 문제점을 보이고 있다.

ex) Rectangle.cpp
#include <iostream>
using namespace std;

class Point						// 4 행
{
	public:
		int x;
		int y;
};

class Rectangle					// 11 행
{
	public:
		Point upLeft;
		Point lowRight;
	public:
		void ShowRecInfo()
		{
			cout << " 좌 상단: " << '[' << upLeft.x << ", ";
			cout << upLeft.y << ']' << endl;
			cout << " 우 하단: " << '[' << lowRight.x << ", ";
			cout << lowRight.y << ']' << endl << endl;
		}
};

int main(void)
{
	Point Pos1 = {-2, 4};			// 29 행
	Point Pos2 = {5, 9};			// 30 행
	Rectangle rec = {Pos2, Pos1};	// 31 행
	rec.ShowRecInfo();
	return 0;
}


해설
4 행 : 점을 표현한 Point 클래스의 멤버변수 x, y는 public 으로 선언되어서 어디서든 접근이 가능하다.
11 행 : Rectangle 클래스는 직사각형을 표현한 것이다. 그런데 직사각형은 두 개의 점으로 표현이 가능하므로, 두 개의 Point 객체를 멤버로 두었다.
이렇듯 클래스의 멤버를 객체로 둘 수 있다.
29, 30 행 : 직사각형을 표현할 두 개의 POint 객체를 생성. 이렇듯 멤버변수가 public으로 선언되면, 구조체 변수를 초기화하듯이 초기화가 가능
31 행 : 위에서 생성한 Point 객체를 이용해서 Rectangle 객체를 생성 및 초기화 하고 있다.

결과
 좌 상단: [5, 9]
 우 하단: [-2, 4]

우선 우리에게 생소할 수 있는 31행의 문장을 조금 보충하겠다. 다음 문장을 보자. 이는 Rectangle 클래스의 객체 rec의 생성 문장이다.

	Rectangle rec;

이 문장에 의해서 생성되는 객체는 메모리상의 다음의 형태로 존재한다.

152 페이지 그림 04 - 1

위 그림에서 보이듯이 Rectangle 객체 안에는 두 개의 Point 객체가 포함되어 있다. 이렇듯 객체가 멤버로 등장한다고 해서 특별히 달라지는건 없다. 그럼 이제 다음 문장의 실행결과도 알 수 있을 것이다.

	 Rectangle rec = {Pos2, Pos1};

위의 문장은 객체를 생성하고 초기화하는 문장이다. 즉, 미리 생성해 놓은 두 개의 Point 객체에 저장된 값이 Rectangle 객체의 멤버에 대입이 도니다.

 152 페이지 그림 04 - 2

이제 위 예제의 흐름을 모두 파악했을 것이다. 그렇다면 어떠한 문제가 있는지 지적해보자.

	점의 좌표는 0 이상 100 이하가 되어야 하는데, 그렇지 못한 Point 객체가 있다.
	직사각형을 의미하는 Rectangle 객체의 좌 상단 좌표 값이 우 하단 좌표 값보다 크다.

점의 좌표값은 0 이상 100 이하가 되어야 유효하다. 하지만 위의 예제는 이를 지키지 않았다 이런 문제는 대부분 프로그래머에게서 실수가 발생하는 경우이다.
누구나 실수는 하지만 다음의 사실은 탓을 해야한다.

	프로그래머의 실수에 대한 대책이 하나도 존재하지 않다.

프로그래머가 실수를 했을 때, 이는 어떻게든 발견되어야 한다. 하지만 위에서 보인 실수는 쉽게 발견이 안된다. 문법적으로 문제가 없기 때문에 컴파일러는 위의 코드를 문제삼지 않기 때문이다.
0 이상 100 이하의 값이 입력되어야 한다거나, 우 하단의 좌표값이 더 커야 한다는 제한은 프로그램의 개발과정에서 등장한 것이다.
때문에 제한된 방법으로의 접근만 허용을 해서 잘못된 값이 저장되지 않도록 도와야 하고, 또 실수를 했을 때, 실수가 쉽게 발견되도록 해야 한다. 
어덯게 해야 이러한 것이 가능할까? 다음 변경된 Point 클래스를 봐보자

ex) Point.h
#ifnedf __POINT_H__
#define __POINT_H__

class Point
{
	private:
		int x;
		int y;

	public:
		bool InitMembers(int xpos, int ypos);
		int GetX() const;
		int GetY() const;
		bool SetX(int xpos);
		bool SetY(int ypos);
};

#endif

먼저 멤버변수 x와 y를 private으로 선언해서 임의로 값이 저장되는 것을 막아놓았다. 즉, x와 y라는 정보를 은닉한 상황이다. 대신에 값의 저장 및 참조를 위한 함수를 추가로 정의하였다.
따라서 이 함수 내에서 멤버변수에 저장되는 값을 제한할 수 있게 되었다. 그럼 이 함수들이 어떻게 정의되어 있는지 살펴보자.

ex) Point.cpp
#include <iostream>
#include "Point.h"
using namespace std;

bool Point::InitMembers(int xpos, int ypos)
{
		if(xpos < 0|| ypos < 0)
		{
			cout << "벗어난 범위의 값 전달" << endl;
			return false;
		}
}
