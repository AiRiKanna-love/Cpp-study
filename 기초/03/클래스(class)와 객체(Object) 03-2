2024/12/18  
// 점점 속도가 느려진다... 피곤해..

앞서 설명한 C++의 구조체는 클래스의 일종이다. 그렇다면 클래스와 구조체는 어떤 차이점이 있을까?


[클래스와 구조체의 유일한 차이점]

키워드 struct를 대신해서 class를 사용하면, 구조체가 아닌 클래스가 된다. 즉, 아래의 코드는 클래스의 정의이다.

class Car
{
	char gamerID[ID_LEN]
	int fuelGuage;
	int curSpeed;

	void ShowCarState() { ... }
	void Accel() { ... }
	void Break() { ... }
};

그렇다. 우리도 관찰했듯이 키워드를 struct가 아닌 class를 사용한 것이 코드상에서의 유일한 차이점이다.
그런데 이렇게 키워드를 바꿔놓으면 앞서 예제에서 보엿던 다음의 방식으로 변수(구조체 변수)를 선언하지 못한다.

Car run99 = {"run99", 100, 0};

이유는 클래스 내에서 선언된 하뭇가 아닌, 다른 영역에서 변수를 초기화하려 했기 때문이다.
클래스는 기본적으로(별도의 선언을 하지 않으면) 클래스 내에 선언된 변수는 클래스 내에 선언된 함수에서만 접근이 가능하다.
따라서 다음과 같은 형태로 클래스 변수를 선언해야 한다.

Car run99;

그럼 어떻게 초기화를 할까? 변수 선언 후에 다음과 같이 초기화 해야할까?

int main(void)
{
	Car run99;
	strcpy(run99.GamerID, "run99");
	run99.fuelGauge = 100;
	run99.curSpeed = 0;
	...
}

하지만 이들 모두 컴파일이 되지 않는다. 클래스 내에 선언된 변수는 기본적으로 클래스 내에 선언된 함수에서만 접근이 가능하다.

그럼 접근이 불가능한데, 이 클래스라는 녀석을 어디다 써먹을까?

물론 접근이 불가능하기만 하다면, 쓸모 없을 것이다. 그러나 클래스는 멤버의 접근과 관련해서 다음과 같이 이야기한다.

접근과 관련해서 별도의 선언을 하지 않으면, 클래스 내에 선언된 변수 및 함수에 대한 접근은 허용하지 않을 테니, 접근과 관련된 지시를 별도로 내려줘

이렇듯 클래스는 정의를 하는 과정에서 각각의 변수 및 함수의 접근 허용범위를 별도로 선언해야힌다.
그리고 바로 이것이 키워드 struct를 이용해서 정의하는 구조체와 키워드 class를 이용해서 정의하는 클래스의 유일한 차이점이다.
// 조금 부정확하게 설명한 부분이 있다. 클래스와 구조체의 차이점에 대해서는 이어서 소개하는 '접근제어 지시자'를 통해서 보다 정확히 설명하겠다.


[접근제어 지시자(접근제어 레이블)]

C++의 접근제어 지시자는 다음과 같이 총 세가지가 존재한다.

public, protected, private

그리고 이들 각각이 의미하는 바는 다음과 같다.

public		어디서든 접근 허용
protected	상속관계에 놓여있을 때, 유도 클래서에서의 접근허용
private		클래스 내(클래스 내에 정의된 함수)에서만 접근허용

이 중에서 protected는 '상속'과 관련이 있으므로 나중에 살펴보지로 하고, 여기서는 public과 private에 대해서만 이야기하겠다.
이 둘과 관련해서 다음 예제를 보자.

ex) RacingCarClassBase.cpp
#include <iostream>
#include <cstring>
using namespace std;

namespace CAR_CONST
{
	enum
	{
		ID_LEN = 20, MAX_SPD = 200, FUEL_STEP = 2,
		ACC_STEP = 10, BRK_STEP = 10
	};
}

class Car				// 14 행
{
	private:			// 16 행
		char gamerID[CAR_CONST::ID_LEN];
		int fuelGauge;
		int curSpeed;
	public:				// 20 행
		void InitMembers(char * ID, int fuel);		// 21 행
		void ShowCarState();
		void Accel();
		void Break();
};

void Car::InitMembers(char * ID, int fuel)			// 27 행
{
	strcpy(gamerID, ID);
	fuelGauge = fuel;
	curSpeed = 0;
}

void Car::ShowCarState()
{
	cout << "소유자ID: " << gamerID << endl;
	cout << "연료량: " << fuelGauge << '%' << endl;
	cout << "현재속도: " << curSpeed << "km/s" << endl << endl;
}

void Car::Accel()
{
	if(fuelGauge <= 0)
		return;
	else
	fuelGauge -= CAR_CONST::FUEL_STEP;

	if((curSpeed + CAR_CONST::ACC_STEP) > CAR_CONST::MAX_SPD)
	{
		curSpeed = CAR_CONST::MAX_SPD;
		return;
	}

	curSpeed += CAR_CONST::ACC_STEP;
}

void Car::Break()
{
	if(curSpeed < CAR_CONST::BRK_STEP)
	{
		curSpeed = 0;
		return;
	}

	curSpeed -= CAR_CONST::BRK_STEP;
}

int main(void)
{
	Car run99;
	run99.InitMembers("run99", 100);		// 66 행
	run99.Accel();
	run99.Accel();
	run99.Accel();
	run99.ShowCarState();
	run99.Break();
	run99.ShowCarState();					// 72 행
	return 0;
}

해설
14 행 : struct를 대신해서 class 선언이 삽입되었다. 따라서 이는 클래스의 정의에 해당한다.

16 행 : 접근제어 지시자중 하나인 private이 선언되었으므로, 이어서 등장하는 변수와 함수는 private에 해당하는 범위 내에서(클래스 내에서)만 접근이 가능하다.

20 행 : 접근제어 지시자중 하나인 public이 선언되었으므로, 이어서 등장하는 변수와 함수는 public에 해당하는 범위 내에서(어디서든) 접근이 가능하다.

21 , 27 행 : 클래스 안에 선언된 변수의 초기화를 목적으로 정의된 함수이다. 변수가 모두 private으로 선언되어서 main 함수에서 접근이 불가능하다.
하지만 이 함수는 동일 클래스 내에 정의된 함수이므로 접근이 가능하다. 뿐만 아니라, 이 함수는 public으로 선언되어서 main 함수에서 호출이 가능하다.
따라서 main 함수에서는 이 함수의 호출을 통해서 클래스 안에 선언된 변수를 초기화할 수 있다.

66 행 : 초기화를 목적으로 InitMembers 함수를 호출하고 있다. 이 함수는 ID정보와 연료의 게이지 정보를 전달받아서 초기화되는 형태로 정의되었다.
단, 변수 curSpeed는 무조건 0으로 초기화 되도록 정의되었다.

66 ~ 72 행 : 함수호출이 가능한 이유는 함수가 모두 public 으로 선언되었기 때문이다.

소유자ID: run99
연료량: 94%
현재속도: 30km/s

소유자ID: run99
연료량: 94%
현재속도: 20km/s

위 예제를 통해서, 그리고 지금까지 설명한 내용을 종합하여, 다음 사실들을 더불어 알 수 있다.

	접근제어 지시자 A가 선언되면, 그 이후에 등장하는 변수나 함수는 A에 해당하는 범위 내에서 접근이 가능하다.

	그러나 새로운 접근제어 지시자 B가 선언되면, 그 이후로 등장하는 변수나 함수는 B에 해당하는 범위 내에서 접근이 가능하다.

	함수의 정의를 클래스 밖으로 빼도, 이는 클래스의 일부이기 때문에 , 함수 내에서는 private으로 선언된 변수에 접근이 가능하다.

	키워드 struct를 이용해서 정의한 구조체(클래스)에 선언된 변수와 함수에 별도의 접근제어 지시자를 선언하지 않으면, 모든 변수와 함수는 public으로 선언된다.

	키워드 class를 이용해서 정의한 클래스에 선언된 변수와 함수에 별도의 접근제어 지시자를 선언하지 않으면, 모든 변수와 함수는 private으로 선언된다.

그리고 위에서 설명하는 struct와 class의 선언에 따른 차이가 구조체와 클래스의 유일한 차이점이다.
즉, 구조체도 클래스도 접근제어 지시자의 선언이 가능하고, 그 의미도 동일히다. 다만 접근제어 지시자를 선언하지 않았을 때 클래스는 private으로 구조체는 public으로 선언할 뿐이다.

	위 예제에서, 클래스 내에 존재하는 변수들은 private으로 선언해서 접근에 불편함을 주는 이유가 뭐에요? 그냥 다 public으로 선언하는 게 좋지 않나요?

이는 지금쯤 나올 수 있는 질문이다. 그런데 이는 '정보은닉(Information Hiding)'과 관련있는 내용이므로 다음에 공부하자.


[용어정리: 객체(Object), 멤버변수, 멤버함수]

더 진도를 나가기에 앞서, 설명의 편의를 위해서라도 용어를 한차례 정리하고자 한다. 구조체 변수, 클래스 변수라는 표현은 이제 어울리지 않는다.
왜냐하면 구조체와 클래스는 변수의 성격만 지니는 것이 아니기 때문이다. 그래서 변수라는 표현을 대신해서 '객체(Object)'라는 표현을 사용한다.

	객체는 무엇을 의미할까? 그리고 객체라고 부르는 이유는 무엇이죠?

잠시 후 객체지향과 관련한 이론적인 이야기를 진행하면서 객체라 불리는 이유를 설명할 테니, 조금만 기다려주기 바란다. 어쨋든 앞서 보인 예제 RacingCarClassBase.cpp의 65행에 선언된 run99는 '변수'가 아닌 '객체'이다.
그리고 클래스를 구성하는(클래스 내에 선언된) 변수를 가리켜 '멤버변수'라 하고, 클래스를 구성하는(클래스 내에 정의된) 함수를 가리켜 '멤버함수'라 한다. 즉, Car 클래스를 구성하는 '멤버변수'는 다음과 같다.

	char gamerID[CAR_CONST::ID_LEN];
	int fuelGauge;
	int curSpeed;

그리고 Car 클래스를 구성하는 '멤버함수'는 다음과 같다.

	void InitMembers(char * ID, int fuel);
	void ShowCarState();
	void Accel();
	void Break();

멤버는 구성원이라는 의미를 담고 있다. 그래서 클래스를 구성하는 변수와 함수에 각각 '멤버변수', '멤버함수'라는 이름을 붙인 것이다.


[C++에서의 파일분할]

어떠한 프로그램이건 하나의 파일에 모든 것을 담진 않는다. 특히 C++은 클래스 별로 헤더파일과 소스파일을 생성해서 클래스의 선언과 정의를 분리하는 경우가 많기 때문에 많은 수의 파일이 만들어진다.
그럼 이어서 클래스를 대상으로, 파일을 나누는 기준을 설명할 텐데, 이에 앞서 필자는 우리가 아래의 내용을 잘 알고 있다고 가정하겠다. 이는 C언어를 공부하는 과정에서 익힌 내용들이다.

	헤더파일의 역할을 알고 있다.

	C언어를 대상으로 헤더파엘에 들어가야 할 내용을 구분할 수 있다.

	헤더파일의 중복포함을 막기ㅓ 위해서 사용하는 매크로 #ifnedf~#endif을 알고 있다.

	둘 이상의 파일을 컴파일해서 하나의 샐행파일을 만드는 법을 알고 있다.

	링커(Linker)가 하는 일을 알고 있다.

// 와 어떻게 제대로 하는게 하나도 없냐;

그러나 위의 내용 중 일부를 조금 덜 알고 있더라도, 이어서 설명하는 내용을 이해하는데 크게 무리는 없을 것이다. 사실 필자는, 지금부터 설명하는 내용 중에서 이해가 가지 않는 부분이 있을 때 복습 빛 참고해야 할 내용을 위에 열거한 것이다.
그럼 이제 C++에서의 파일분할에 대해 이야기해 보자. 클래스 Car를 대상으로 파일을 나눌 때에는 보통 다음과 같이 파일을 구분한다.

	Car.h		클래스의 선언을 담는다.
	Car.cpp		클래스의 정의(멤버함수의 정의)를 담는다.

여기서 말하는 클래스의 선언은 다음과 같다.

class Car
{
	private:
		char gamerID[CAR_CONST::ID_LEN];
		int fuelGauge;
		int curSpeed;
	public:
		void InitMembers(char * ID, int fuel);
		void ShowCarState();
		void Accel();
		void Break();
};

이는 컴파일러가  Car 클래스와 관련된 문장의 오류를 잡아내는데 필요한 최소한의 정보로써, 클래스를 구성하는 외형적인 틀을 보여준다. 따라서 이를 가리켜 '클래스의 선언(declaration)'이라 한다.
즉, 위의 정보는 클래스 Car와 관련된 문장의 옳고 그름을 판단하는데 사용된다. 예를 들면 아래의 코드를 컴파일하는데 있어서 위의 정보는 반드시 필요하다.

int main(void)
{
	Car run99;
	run99.fuelGauge = 100;		// fuelGauge가 private임을 확인하고 에러를 발생시킴
	run99.Accel(20);			// Accel 함수의 매개변수가 void형임을 알고 에러를 발생시킴
	...
}

반면, '클래스의 정의(definition)'에 해당하는 다음 함수의 정의는 다른 문장의 컴파일에 필요한 정보를 가지고 있지 않다.
따라서 함수의 정의는 컴파일 된 이후에, 링커에 의해 하나의 실행파일로 묶이기만 하면 된다.

void Car::InitMembers(char * ID, int fuel) {...}
void Car::ShowCarState() {...}
void Car::Accel() {...}
void Car::Break() {...}

그럼 이제 결론을 내리겠다. Car 클래스와 관련된 문장의 컴파일 정보로 사용되는 '클래스의 선언'은 헤더파일에 저장을 해서, 필요한 위치에 쉽게 포함될 수 있도록 해야 하며,
'클래스의 정의'는 소스 파일에 저장해서, 컴파일이 되도록 하면 된다. 그럼 지금까지 설명한 내용을 기반으로 앞서 보인 예제 RacingCarClassBase.cpp를 총 3개의 파일로 적절히 나눠보자.

ex)Car.h
#ifndef __CAR_H__		// 1 행
#define __CAR_H__		// 2행

namespace CAR_CONST		// 4 행
{
	enum
	{
		ID_LEN = 20, MAX_SPD = 200, FUEL_STEP = 2,
		ACC_STEP = 10, BRK_STEP = 10
	};
}						// 1 행

class Car
{
	private:
		char gamerID[CAR_CONST::ID_LEN];
		int fuelGauge;
		int curSpeed;
	public:
		void InitMembers(char * name, int fuel);
		void ShowCarState();
		void Accel();
		void Break();
};

#endif		// 26 행

해설
1, 2, 26 행 : 이는 헤더파일의 중복포함 문제를 해결하기 위한 매크로이다.
4 ~ 11 행 : 이는 Car에서 제한적으로 사용되는 상수의 선언이므로 클래스 Car와 같은 파일에 선언하였다.



ex)Car.cpp
#include <iostream>
#include <cstring>
#include "Car.h"				// 3 행
using namespace std;

void Car::InitMembers(char * name, int fuel)
{
	strcpy(gamerID, name);
	fuelGauge = fuel;
	curSpeed = 0;
}

void Car::ShowCarState()
{
	cout << "소유자ID: " << gamerID << endl;
	cout << "연료량: " << fuelGauge << '%' << endl;
	cout << "현재속도: " << curSpeed << "km/s" << endl << endl;
}

void Car::Accel()
{
	if(fuelGauge < CAR_CONST::FUEL_STEP)
		return;
	else
		fuelGauge -= CAR_CONST::FUEL_STEP;

	if((curSpeed + CAR_CONST::ACC_STEP) >= CAR_CONST::MAX_SPD)
	{
		curSpeed = CAR_CONST::MAX_SPD;
		return;
	}

	curSpeed += CAR_CONST::ACC_STEP;
}

void Car::Break()
{
	if(curSpeed < CAR_CONST::BRK_STEP)
	{
		curSpeed = 0;
		return;
	}

	curSpeed -= CAR_CONST::BRK_STEP;
}

해설
3 행 : 멤버함수의 정의부분을 컴파일 하는데도 클래스의 선언 정보가 필요하다. 멤버함수에서 접근하는 변수의 존재유무를 확인해야 하기 때문이다.
그리고 이름공간 CAR_CONST에 선언된 상수의 사용을 위해서라도 이 헤더파일은 포함되어야 한다.

ex)RacingMain.cpp
#include "Car.h"		// 1 행

int main(void)
{
	Car run99;
	run99.InitMembers("run99", 100);
	run99.Accel();
	run99.Accel();
	run99.Accel();
	run99.ShowCarState();
	run99.Break();
	run99.ShowCarState();
	return 0;
}

해설
1 행 : main 함수를 구성하는 문장은 클래스 Car와 관련된 것뿐이다. 따라서 헤더파일 Car.h만 포함하면 된다.

결과
소유자ID: run99
연료량: 94%
현재속도: 30km/s

소유자ID: run99
연료량: 94%
현재속도: 20km/s

이렇게 파일을 분할해 놓고 보니, 클래스 Car를 구성하는 멤버의 파악도 한결 수월해졌다. 그리고 뭔가 좀 정리가 되었다는 느낌도 들지 않는가?
사실 처믕네 이러한 파일의 분할이 익숙지 않아서 오히려 부답스럽게 느껴지기도 한다. 그러나 조금만 익숙해지면, 하나의 파일에 모든 것을 집어넣는 것이 오히려 더 이상하게 느껴질 것이다.
필자는 이후에 제시하는 예제의 성격(또는 크기)에 따라서 파일의 분할유무를 판단할 테니, 위의 파일분할에 익숙해지자.


[인라인 함수는 헤더파일에 함께 넣어야 해요]

앞서 보인 파일분할 예제에서 Car.cpp 에 정의된 함수 ShowCarState와 Break를 다음과 같이 인라인화 한 다음에, 그대로 Car.cpp에 두면 컴파일 에러가 발생한다.

	inline void Car::ShowCarState()
	{
		cout << "소유자ID: " << gamerID << endl;
		cout << "연료량: " << fuelGauge << '%' << endl;
		cout << "현재속도: " << curSpeed << "km/s" << endl << endl;
	}

	inline void Car::Break()
	{
		if(curSpeed < CAR_CONST::BRK_STEP)
		{
			curSpeed = 0;
			return;
		}

		curSpeed -= CAR_CONST::BRK_STEP;
	}

혹시 컴파일 에러가 발생하는 이유를 알겠는가? 인라인 함수의 특징을 잘 생각해보면 그 이유를 알 수 잇는데, 이유는 다음과 같다.

	컴파일 과정에서 함수의 호출 문이 있는 곳에 함수의 몸체 부분이 삽입되어야 하므로

예를 들어서 다음의 main 함수를 컴파일 한다고 가정해보자.

	int main(void)
	{
		Car run99;
		run99.InitMembers("run99", 100);
		run99.Accel();
		run99.Break();
		...
	}

이 때 Break 함수가 인라인 함수가 아니라면, Break 함수가 Car 클래스의 멤버함수인지만 확인을 하고 컴파일은 완료가 된다.
그러나 Break 함수가 인라인 함수이기 때문에, Break 함수의 호출문장은 컴파일러에 의해서 Break 함수의 몸체로 대체되어야 한다.
때문에 인라인 함수는 클래스의 선언과 동일한 파일에 저장되어서 컴파일러가 동시에 참조할 수 있게 해야 한다. 아래의 예제에서 보이듯 말이다.

ex)CarInline.h
#ifnedf __CARINLINE_H__
#define __CARINLINE_H__

#include <iostream>
using namespace std;

namespace CAR_CONST
{
	enum
	{
		ID_LEN = 20, MAX_SPD = 200, FUEL_STEP = 2,
		ACC_STEP = 10, BRK_STEP = 10
	};
}

class Car
{
	private:
		char gamerID[CAR_CONST::ID_LEN];
		int fuelGauge;
		int curSpeed;
	public:
		void InitMembers(char * name, int fuel);
		void ShowCarState();
		void Accel();
		void Break();
};

inline void Car::ShowCarState()
{
	cout << "소유자ID: " << gamerID << endl;
	cout << "연료량: " << fuelGauge << '%' << endl;
	cout << "현재속도: " << curSpeed << "km/s" << endl << endl;
}

inline void Car::Break()
{
	if(curSpeed < CAR_CONST::BRK_STEP)
	{
		curSpeed = 0;
		return;
	}
	curSpeed -= CAR_CONST::BRK_STEP;
}

#endif

CarInline.cpp
#include <cstring>
#include "CarInline.h"
using namespace std;

void Car::InitMembers(char * name, int fuel)
{
	strcpy(gamerID, name);
	fuelGauge = fuel;
	curSpeed = 0;
}

void Car::Accel()
{
	if(fuelGauge < CAR_CONST::FUEL_STEP)
		return;
	else
		fuelGauge -= CAR_CONST::FUEL_STEP;

	if((curSpeed + CAR_CONST::ACC_STEP) >= CAR_CONST::MAX_SPD)
	{
		curSpeed = CAR_CONST::MAX_SPD;
		return;
	}

	curSpeed += CAR_CONST::ACC_STEP;
}

RacingInlineMain.cpp
#include "CarInline.h"

int main(void)
{
	Car run99;
	run99.InitMembers("run99", 100);
	run99.Accel();
	run99.Accel();
	run99.Accel();
	run99.ShowCarState();
	run99.Break();
	run99.ShowCarState();
	return 0;
}

앞서 보인 예제에서 두 개의 함수를 인라인 선언한 것이 변경의 전부이므로, 별도의 소스해설이나 실행겨로가를 보이지는 않겠다.
그리고 혹시나 해서 하는 말인데(이미 잘 알고 있을 테지만), 컴파일러는 파일 단위로 컴파일을 한다.
즉, 우리가 A.cpp와 B.cpp를 동시에 컴파일 해서 하나의 실행파일을 만든다 해도, A.cpp의 컴파일 과정에서 B.cpp를 참조하지 않으며,
B.cpp의 컴파일 과정에서 A.cpp를 참조하지 않는다. 그래서 위의 예제에서 보이듯이 클래스의 선언과 인라인 함수의 정의를 함께 묶어둔 것이다.

