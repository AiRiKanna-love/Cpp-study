2024/12/18  
// 점점 속도가 느려진다... 피곤해..

앞서 설명한 C++의 구조체는 클래스의 일종이다. 그렇다면 클래스와 구조체는 어떤 차이점이 있을까?


[클래스와 구조체의 유일한 차이점]

키워드 struct를 대신해서 class를 사용하면, 구조체가 아닌 클래스가 된다. 즉, 아래의 코드는 클래스의 정의이다.

class Car
{
	char gamerID[ID_LEN]
	int fuelGuage;
	int curSpeed;

	void ShowCarState() { ... }
	void Accel() { ... }
	void Break() { ... }
};

그렇다. 우리도 관찰했듯이 키워드를 struct가 아닌 class를 사용한 것이 코드상에서의 유일한 차이점이다.
그런데 이렇게 키워드를 바꿔놓으면 앞서 예제에서 보엿던 다음의 방식으로 변수(구조체 변수)를 선언하지 못한다.

Car run99 = {"run99", 100, 0};

이유는 클래스 내에서 선언된 하뭇가 아닌, 다른 영역에서 변수를 초기화하려 했기 때문이다.
클래스는 기본적으로(별도의 선언을 하지 않으면) 클래스 내에 선언된 변수는 클래스 내에 선언된 함수에서만 접근이 가능하다.
따라서 다음과 같은 형태로 클래스 변수를 선언해야 한다.

Car run99;

그럼 어떻게 초기화를 할까? 변수 선언 후에 다음과 같이 초기화 해야할까?

int main(void)
{
	Car run99;
	strcpy(run99.GamerID, "run99");
	run99.fuelGauge = 100;
	run99.curSpeed = 0;
	...
}

하지만 이들 모두 컴파일이 되지 않는다. 클래스 내에 선언된 변수는 기본적으로 클래스 내에 선언된 함수에서만 접근이 가능하다.

그럼 접근이 불가능한데, 이 클래스라는 녀석을 어디다 써먹을까?

물론 접근이 불가능하기만 하다면, 쓸모 없을 것이다. 그러나 클래스는 멤버의 접근과 관련해서 다음과 같이 이야기한다.

접근과 관련해서 별도의 선언을 하지 않으면, 클래스 내에 선언된 변수 및 함수에 대한 접근은 허용하지 않을 테니, 접근과 관련된 지시를 별도로 내려줘

이렇듯 클래스는 정의를 하는 과정에서 각각의 변수 및 함수의 접근 허용범위를 별도로 선언해야힌다.
그리고 바로 이것이 키워드 struct를 이용해서 정의하는 구조체와 키워드 class를 이용해서 정의하는 클래스의 유일한 차이점이다.
// 조금 부정확하게 설명한 부분이 있다. 클래스와 구조체의 차이점에 대해서는 이어서 소개하는 '접근제어 지시자'를 통해서 보다 정확히 설명하겠다.


[접근제어 지시자(접근제어 레이블)]

C++의 접근제어 지시자는 다음과 같이 총 세가지가 존재한다.

public, protected, private

그리고 이들 각각이 의미하는 바는 다음과 같다.

public		어디서든 접근 허용
protected	상속관계에 놓여있을 때, 유도 클래서에서의 접근허용
private		클래스 내(클래스 내에 정의된 함수)에서만 접근허용

이 중에서 protected는 '상속'과 관련이 있으므로 나중에 살펴보지로 하고, 여기서는 public과 private에 대해서만 이야기하겠다.
이 둘과 관련해서 다음 예제를 보자.
