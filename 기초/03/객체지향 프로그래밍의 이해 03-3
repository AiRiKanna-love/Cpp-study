2024/12/22

지금까지는 C언어에서 C++로 자연스럽게 이동할 수 있도록, 구조체를 시작으로 클래스를 설명하였다.
그런데 이번에는 객체지향의 관점에서 클래스를 전혀 다른 방법으로, 다시 한번 설명하고자 한다.
구조체를 확장한 것이 클래스라고 인식한느 것 자체는 문제가 되지 않으나, 그것이 전부라고 인싱하는 것은 문제가 있기 때문이다.


[객체지향 프로그래밍의 이해]

C++은 객체지향 언어이다. 따라서 객체지향에 대한 이해가 필요한다. 이를 위해서 필자는 책 전반에 걸쳐서 객체지향의 우월성을 강조할 것이다.
그러나 이것이 C언어와 같은 절차지향저거 언어보다 모든 면에서 우월함을 뜻하는 것은 아니다. 물론 절차지향적 특성이 갖지 못하는 많은 장점을 객체지향은 지니고 있다. 그러나 절차지향도 그 나름의 장점이 이싿.

객체는 영어로  Object이다. 그리고 이의 사전적 의미는 다음과 같다. 물론 더 많은 의미가 있지만 C++에서 말하는 Object의 의미는 이것이다.

  사물, 또는 대상

즉, Object는 우리 주변에 존재하는 물건(연필, 나무, 지갑, 돈 등등)이나 대상(철수, 친구, 선생님 등등) 전부를 의미한다.
그렇다면 객체를 지향하는 프로그래밍이라는 것은 무엇일까? 예를 들어서 다음 상황을 시뮬레이션 하는 프로그램을 구현한다고 가정해보자.

	나는 과일장수에게 두 개의 사과를 구매했다.

이 문장에 삽입되어 있는 객체의 종류는 다음과 같다.

	나(me), 과일장수, 사과

그렇다면 '나(me)'라는 객체는 '과일장수'라는 객체로부터 '과일' 객체의 구매라는 액션을 취할 수 있어야 한다. 그런데 객체지향 프로그래밍에서는 '나' 그리고 '과일장수'와 같은 객체를 등장시킬 수 있을 뿐만 아니라,
'나'라는 객체가 '과일장수'라는 객체로부터 '과일' 객체를 구매하는 행위도 그대로 표현할 수 있다.	즉, 객체지향 프로그래밍은 현실에 존재하는 사물과 대상, 그리고 그에 따른 행동을 있는 그대로 실체화 시키는 형태의 프로그래밍이다.
이의 확인을 위해서 '나'와 '과일장수'라는 객체를 생성하여 다음의 행동을 실체화 시켜보자.

	나는 과일장수에게 2,000원을 주고 두 개의 사과를 구매했다.

참고로 사과도 객체로 실체화시킬 수 있으나, 코드의 간결성을 위해서 '나'와 '과일장수'만 객체화시키도록 하자.


[객체를 이루는 것은 데이터와 기능이다.]

프로그램상에 과일장수 객체가 존재한다고 가정해 보자. 이 객체는 무엇으로 이뤄져야 하는가? 물론 과일장수는 한 가정의 아버지이면서, 토요일이면 축구 클럽의 아마추어 선수로서 활동하고 있을 수도 있다.
그러나 프로그램상에서 바라보는 과일장수의 관점은 '과일의 판매'에 있다. 따라서 프로그램상에서 바라보는 과일장수는 다음과 같은 형태이다.

	과일장수는 과일을 판다.

	과일장수는 사과 20개, 오렌지 10개를 보유

	과일장수의 과일판매 수익은 현재까지 50,000원이다.

이 중에서 첫 번째는 과일장수의 '행동(behavior)'을 의미한다. 그리고 두 번째와 세 번째는 과일장수의 '상태(state)'를 의미한다. 이처럼 객체는 하나 이상의 상태 정보(데이터)와 하나 이상의 행동(기능)으로 구성이 되며,
상태 정보는 변수를 통해서 표현이 되고(변수에 상태 정보를 저장할 수 있으므로), 행동은 함수를 통해서 표현이 된다. 그럼 먼저 과일장수의 상태 정보를 변수로 표현해보겟다

	보유하고 있는 사과의 수 -> int numOfApples

	판매 수익			  -> int myMoney;

이번에는 과일장수의 행위인 과일의 판매를 함수로 표현

	int SaleApples(int money)		// 사과 구매액이 함수의 인자로 전달
	{
		int num = money/1000;		// 사과가 개당 1000원이라고 가정
		numOfApples -= num;			// 보유하고 있는 사과의 수가 줄고,
		myMoney += money;			// 판매 수익이 발생
		return num;					// 실제 구매가 발생한 사과의 수를 반환
	}

이렇게 해서 과일장수의 객체를 구성하게 되는 변수와 함수가 마련되었으니, 이제 이들을 묶어서 객체로 실체화 하는 일만 남았다.


['과일장수'의 정의와 멤버변수의 상수화에 대한 논의]

객체를 생성하기에 앞서 객체의 생성을 위한 '틀(mold)'을 먼저 만들어야 한다. 이는 현실 세계에서 물건을 만들기 위해 틀을 짜는 행위에 비유할 수 있다. 겨울에 맛있게 먹는 붕어빵을 만들기 위해서는 붕어빵의 '틀'이 필요하다.
마찬가지로 '나' 또는 '과일장수' 객체를 생성하기 위해서는 이 둘을 위한 틀을 먼저 만들어야 하는데, 위에서 마련해놓은 함수와 변수를 이용해서 틀을 만들면 다음의 형태가 된다.

