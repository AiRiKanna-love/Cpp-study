2024/12/22

지금까지는 C언어에서 C++로 자연스럽게 이동할 수 있도록, 구조체를 시작으로 클래스를 설명하였다.
그런데 이번에는 객체지향의 관점에서 클래스를 전혀 다른 방법으로, 다시 한번 설명하고자 한다.
구조체를 확장한 것이 클래스라고 인식한느 것 자체는 문제가 되지 않으나, 그것이 전부라고 인싱하는 것은 문제가 있기 때문이다.


[객체지향 프로그래밍의 이해]

C++은 객체지향 언어이다. 따라서 객체지향에 대한 이해가 필요한다. 이를 위해서 필자는 책 전반에 걸쳐서 객체지향의 우월성을 강조할 것이다.
그러나 이것이 C언어와 같은 절차지향저거 언어보다 모든 면에서 우월함을 뜻하는 것은 아니다. 물론 절차지향적 특성이 갖지 못하는 많은 장점을 객체지향은 지니고 있다. 그러나 절차지향도 그 나름의 장점이 이싿.

객체는 영어로  Object이다. 그리고 이의 사전적 의미는 다음과 같다. 물론 더 많은 의미가 있지만 C++에서 말하는 Object의 의미는 이것이다.

  사물, 또는 대상

즉, Object는 우리 주변에 존재하는 물건(연필, 나무, 지갑, 돈 등등)이나 대상(철수, 친구, 선생님 등등) 전부를 의미한다.
그렇다면 객체를 지향하는 프로그래밍이라는 것은 무엇일까? 예를 들어서 다음 상황을 시뮬레이션 하는 프로그램을 구현한다고 가정해보자.

	나는 과일장수에게 두 개의 사과를 구매했다.

이 문장에 삽입되어 있는 객체의 종류는 다음과 같다.

	나(me), 과일장수, 사과

그렇다면 '나(me)'라는 객체는 '과일장수'라는 객체로부터 '과일' 객체의 구매라는 액션을 취할 수 있어야 한다. 그런데 객체지향 프로그래밍에서는 '나' 그리고 '과일장수'와 같은 객체를 등장시킬 수 있을 뿐만 아니라,
'나'라는 객체가 '과일장수'라는 객체로부터 '과일' 객체를 구매하는 행위도 그대로 표현할 수 있다.	즉, 객체지향 프로그래밍은 현실에 존재하는 사물과 대상, 그리고 그에 따른 행동을 있는 그대로 실체화 시키는 형태의 프로그래밍이다.
이의 확인을 위해서 '나'와 '과일장수'라는 객체를 생성하여 다음의 행동을 실체화 시켜보자.

	나는 과일장수에게 2,000원을 주고 두 개의 사과를 구매했다.

참고로 사과도 객체로 실체화시킬 수 있으나, 코드의 간결성을 위해서 '나'와 '과일장수'만 객체화시키도록 하자.


[객체를 이루는 것은 데이터와 기능이다.]

프로그램상에 과일장수 객체가 존재한다고 가정해 보자. 이 객체는 무엇으로 이뤄져야 하는가? 물론 과일장수는 한 가정의 아버지이면서, 토요일이면 축구 클럽의 아마추어 선수로서 활동하고 있을 수도 있다.
그러나 프로그램상에서 바라보는 과일장수의 관점은 '과일의 판매'에 있다. 따라서 프로그램상에서 바라보는 과일장수는 다음과 같은 형태이다.

	과일장수는 과일을 판다.

	과일장수는 사과 20개, 오렌지 10개를 보유

	과일장수의 과일판매 수익은 현재까지 50,000원이다.

이 중에서 첫 번째는 과일장수의 '행동(behavior)'을 의미한다. 그리고 두 번째와 세 번째는 과일장수의 '상태(state)'를 의미한다. 이처럼 객체는 하나 이상의 상태 정보(데이터)와 하나 이상의 행동(기능)으로 구성이 되며,
상태 정보는 변수를 통해서 표현이 되고(변수에 상태 정보를 저장할 수 있으므로), 행동은 함수를 통해서 표현이 된다. 그럼 먼저 과일장수의 상태 정보를 변수로 표현해보겟다

	보유하고 있는 사과의 수 -> int numOfApples

	판매 수익			  -> int myMoney;

이번에는 과일장수의 행위인 과일의 판매를 함수로 표현

	int SaleApples(int money)		// 사과 구매액이 함수의 인자로 전달
	{
		int num = money/1000;		// 사과가 개당 1000원이라고 가정
		numOfApples -= num;			// 보유하고 있는 사과의 수가 줄고,
		myMoney += money;			// 판매 수익이 발생
		return num;					// 실제 구매가 발생한 사과의 수를 반환
	}

이렇게 해서 과일장수의 객체를 구성하게 되는 변수와 함수가 마련되었으니, 이제 이들을 묶어서 객체로 실체화 하는 일만 남았다.


['과일장수'의 정의와 멤버변수의 상수화에 대한 논의]

객체를 생성하기에 앞서 객체의 생성을 위한 '틀(mold)'을 먼저 만들어야 한다. 이는 현실 세계에서 물건을 만들기 위해 틀을 짜는 행위에 비유할 수 있다. 겨울에 맛있게 먹는 붕어빵을 만들기 위해서는 붕어빵의 '틀'이 필요하다.
마찬가지로 '나' 또는 '과일장수' 객체를 생성하기 위해서는 이 둘을 위한 틀을 먼저 만들어야 하는데, 위에서 마련해놓은 함수와 변수를 이용해서 틀을 만들면 다음의 형태가 된다.

그림 03 - 2 틀의 정의

이는 우리가 잘 아는 클래스의 정의이다. 즉, FruitSeller라는 이름의 클래스가 과일장수의 틀이 되는 것이다. 그런데 우리는 과일장수에게 다음과 같은 질문을 할 수 있다.

	오늘 과일 좀 많이 파셨어요?

그러면 과일장수는 다음과 같이 답을 할 것이다.

	2,000원 벌었어, 남은 사과는 18개 이고 말이야.

그래서 이러한 '대화에 사용되는 함수'와 '변수를 초기화 하는데 사용하는 함수'를 추가해서 과일장수의 틀을 다음과 같이 완성하겠다.

	class FruitSeller
	{
		private:
			int APPLE_PRICE;
			int numOfApples;
			int myMoney;
		public:
			void InitMembers(int price, int num, int money)
			{
				APPLE_PRICE = price;
				numOfApples = num;
				myMoney = money;
			}
			int SaleApples(int money)
			{
				int num = money/APPLE_PRICE;
				numOfApples -= num;
				myMoney += money;
				return num;
			}
			void ShowSalesResult()
			{
				cout << "남은 사과 : " << numOfApples << endl;
				cout << "판매 수익 : " << myMoney << endl;
			}
	};

위의 틀(클래스 정의)에서 사과의 가격을 의미하는 멤버변수 APPLE_PRICE의 이름을 대무자로 구성한 이유는 다음과 같은 가정의 결과이다.

	사과의 판매가격은 일정하다.

즉, 가격을 상수라고 가정한 것이다. 보통 하루를 기준으로 사과의 판매가가 변하는 일은 없으니, 상수로 가정하는 것도 일리는 있다. 따라서 다음과 같이 const 선언을 하여 실수로 값의 변경이 일어나는 일을 막았으면 좋겠다.

	const int APPLE_PRICE = 1000;

하지만 이는 불가능하다. 클래스의 멤버변수 선언문에서 초기화까지 하는 것을 허용하지 않기 때문이다.
따라서 다음과 같이라도 선언했으면 좋겠다. 그래서 객체를 생성한 다음에 InitMembers 함수의 호출을 통해서라도 상수 값을 초기화 했으면 좋겠다.

	const int APPLE_PRICE;

그러나 이 역시 불가능하다. 상수는 선언과 동시에 초기화를 진행해야 하기 때문이다. 즉, 현재 우리로서는 APPLE_PRICE를 상수로 선언할 방법이 없다.  // 생성자를 배우면 가능
이후에 생성자를 공부하면서 이에 대한 답을 찾을 수 있다.


[나(me)를 표현하는 클래스의 정의]

이제 '나(me)'를 표현하기 위한 클래스를 정의할 차례, 이는 과일 구매자를 뜻하는 것이니, 클래스의 이름을 FruitBuyer라 하겠다. 그렇다면 FruitBuyer 클래스에는 어떠한 변수들과 함수들로 정의해야 할까?
먼저 데이터적인 측면을 바라보자. 구매자에게 있어서 가장 중요한 것은 돈이다. 돈이 있어야 물품을 구매할 수 있기 때문이다. 그리고 구매를 했다면 해당 물품을 소유해야 한다.
따라서 다음의 두 변수를 FruitBuyer 클래스의 멤버변수로 생각해 볼 수 있다.

	소유하고 있는 현금의 액수 -> int myMoney;
	소유하고 있는 사과의 개수 -> int numOfApples;

이제 기능적인 측면을 생각해 보자. 과일 구매자가 지녀야 할 기능은 '과일의 구매'이다. 따라서 이 기능을 담당할 함수를 클래스에 추가해야 한다. 이 함수의 이름을 BuyApples이라 하면, FruitBuyer 클래스는 다음과 같이 정의가 된다.

	class FruitBuyer
	{
		private:
			int myMoney;
			int numOfApples;
		public:
			void InitMembers(int money)
			{
				myMoney = money;
				numOfApples = 0;
			}
			void BuyApples(FruitSeller &selle, int money)
			{
				numOfApples += seller.SaleApples(money);
				myMoney -= money;
			}
			void ShowBuyResult()
			{
				cout << "현재 잔액: " << myMoney << endl;
				cout << "사과 개수: " << numOfApples << endl;
			}
	};

위의 클래스에 선언된 두 변수 myMoney와 numOfApples에는 private이나 public과 같은 선언이 존재하지 않음을 알 수 있다.		// 물론 전 적었습니다. 안 적었다는 가정하에 말하는 내용입니다.
그러나 클래스는 아무런 선언이 존재하지 않을 때 private으로 간주된다고 하지 않았는가(구조체는 public) 즉, 이 둘은 private 이다.
이렇듯 클래스를 정의할 때, private선언을 목적으로 접근제어 지시자를 생략하는 경우가 흔히 있으니, 그 의미를 기억하기 바란다.


[클래스 기반의 두 가지 객체생성 방법]

우리는 지금 막 두개의 클래스를 정의하였다. 그렇다면 객체를 생성하지 않고, 이 두 클래스 안에 존재하는 변수에 접근하고, 함수를 호출하는 것이 가능할까? 언뜻 가능할 것처럼 보이기도 한다.
그러나 이들은 '실체(다시 말해서 객체)'가 아닌 '틀'이다. 따라서 접근도 호출도 불가능하다. 이는 자동차 엔진과 자동차의 외형을 생산할 수 있는 틀이 있다고 해서, 이들을 타고 달릴 수 없는 것과 같은 이치이다.
그럼 우리가 해야 할 일은 앞서 정의한 클래스를 실체화 하는 것이다. 즉, 객체화 시키는것
다음은 C++에서 정의하고 잇는 두 가지 객체생성 방법이다. 이는 기본 자료형 변수의 선언방식과 동일함을 보이는 것이니 당황할 필요 없다.

	ClassName objName;								// 일반적인 변수의 선언 방식
	ClassName * ptrObj = new ClassName;				// 동적 할당방식(힙 할당방식)

즉, 우리가 정의한 FruitSeller 클래스와 FruitBuyer 클래스의 객체 생성방식은 다음과 같다.

	FruitSeller seller;
	FruitBuyer buyer;

그리고 이를 동적으로 할당하려면 다음과 같이 생성하면 된다.

	FruitSeller * objptr1 = new FruitSeller;
	FruitBuyer * objptr2 = new FruitBuyer;

이로써 기본적인 클래스의 정의방법과 객체의 생성방법, 그리고 클래스와 객체의 의미를 모두 설명했다.			// 애매하네 이거.. ㅎ;


[사과장수 시뮬레이션 완료]

이제 예제를 완성할 차례이다. 이 예제가 특히 의미를 갖는 이유는 두 객체가 서로 대화를 하기 때문이다.
그럼 객체는 어떻게 대화를 주고받는지 예제를 통해 알아보자.

ex) FruitSaleSim1.cpp
#include <iostream>
using namespace std;

class FruitSeller
{
	private:
		int APPLE_PRICE;
		int numOfApples;
		int myMoney;
	public:
		void InitMembers(int price, int num, int money)
		{
			APPLE_PRICE = price;
			numOfApples = num;
			myMoney = money;
		}
		int SaleApples(int money)
		{
			int num = money / APPLE_PRICE;
			numOfApples -= num;
			myMoney += money;
			return num;
		}
		void ShowSalesResult()
		{
			cout << "사과 개수: " << numOfApples << endl;
			cout << "판매 수익: " << myMoney << endl << endl;
		}
};

class FruitBuyer
{
	private:
		int numOfApples;		// 34 행
		int myMoney;			// 35 행
	public:
		void InitMembers(int money)
		{
			numOfApples = 0;
			myMoney = money;
		}
		void BuyApples(FruitSeller &seller, int money)
		{
			numOfApples += seller.SaleApples(money);			// 45 행
			myMoney -= money;
		}
		void ShowBuyResult()
		{
			cout << "사과 개수: " << numOfApples << endl;
			cout << "현재 잔액: " << myMoney << endl << endl;
		}
};

int main(void)
{
	FruitSeller seller;
	seller.InitMembers(1000, 20, 0);
	FruitBuyer buyer;
	buyer.InitMembers(5000);
	buyer.BuyApples(seller, 2000);				// 61 행

	cout << "과일 판매자의 현황" << endl;
	seller.ShowSalesResult();
	cout << "과일 구매자의 현황" << endl;
	buyer.ShowBuyResult();
	return 0;
}

해설
34, 35 행 : 클래스 내에서 접근제어 지시자가 생략되었으니, 이 둘은 private으로 간주		// 물론 난 적었다.
45 행 : 과일장수를 대상으로 과일의 구매를 목적으로 SaleApples 함수를 호출
65 행 : 이 예제에서 어렵게 느껴질 수 있는 부분. BuyApples은 사과의 구매 기능을 담당하는 함수이다. 즉, 이 함수 내에서 사과의 구매가 완성되어야 한다.
그렇다면 생각을 해보자. 사과를 구매하는데 있어서 필요한 것 두가지가 무엇인가? FruitBuyer 클래스 안에 존재하지 않지만 필요한 것 말이다.
그것은 '구매대상'과 '구매금액'이다. 그래서 이 둘의 정보가 인자로 전달되도록 함수가 정의되었다.

결과
과일 판매자의 현황
사과 개수: 18
판매 수익: 2000

과일 구매자의 현황
사과 개수: 2
현재 잔액: 3000

위 예제에서 45행과 61행을 특히 주목해서 보자. 이는 코드의 흐름 이상의 것을 담고 잇으니 주목해서 볼 필요가 있다. 이어서 이 부분에 대한 설명을 추가로 진행


[객체간의 대화방법(Message Passing 방법)]
위 예제 FruitSaleSim1.cpp의 45행을 보면, FruitBuyer 객체에 존재하는 함수 내에서 FruitSeller 객체의 함수 SaleApples를 호출하고 있다. 그런데 이 한문장은 현실세계에서 다음과 같이 반영이 된다.

	seller 아저씨, 사과 2,000 어치 주세요

뭔가 느껴지는 것이 없는가? 이는 객체지향에서 매우 중요한 의미를 가진다. 앞서 필자가 다음과 같이 이야기했던 것을 기억하는가?

	'나'라는 객체가 '과일장수'라는 객체로부터 '과일' 객체를 구매하는 행위도 그대로 표현할 수 있다.

즉, FruitSaleSim1.cpp의 45행은 FruitBuyer 객체가 FruitSeller 객체에게 다음과 같은 메시지를 전달하는 상황이다.

	seller 아저씨, 사과 2,000 어치 주세요

이처럼 하나의 객체가 다른 하나의 객체에게 메시지를 전달하는 방법은(어떤 행위의 요구를 위한 메시지 전달) 함수호출을 기반으로 한다.
그래서 객체지향에서는 이러한 형태의 함수호출을 가리켜 '메시지 전달'이라 한다.
