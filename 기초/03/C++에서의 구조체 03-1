2024/12/16

우리가 이미 구조체를 잘 알고 있다고 가정하고 이야기를 이어가겠다. 따라서 구조체에 대한 이해가 부족하다면, 잠시 이 책을 접어두고 구조체를 먼저 공부하기 바란다.


[구조체의 등장배경은 무엇인가?]

C언어로 프로그램을 구현한다면, 구조체의 정의는 항상 뒤를 따르기 마련이다. 그렇다면 구조체가 주는 이점이 무엇이기에 이렇듯 중요한 위치를 차지하고 있는걸까?
이와 유사한 질문에 선배 프로그래머들에게 한다면, 다양한 답변이 나올 것이다. 그러나 그 이면에는 다음의 내용이 공통분모로 자리잡고 있다.

  '연관 있는 데이터를 하나로 묶으면, 프로그램의 구현 및 관리가 용이하다.'

소프트웨어를 단순히 표현하면 다음과 같다.

  '소프트웨어 = 데이터의 표현 + 데이터의 처리'

그런데 '표현해야 하는 데이터'는 항상 부류를 형성하기 마련이다. 그리고 이렇게 부류를 형성하는 데이터들은 함께 생성, 이동 및 소멸되낟는 특성이 있다. 그래서
구조체는 연관 있는 데이터를 묶을 수 있는 문법적 장치로 데이터의 표현에 매우 큰 도움을 준다. 예를 들어서 레이싱게임의 캐릭터로 등장하는 '자동차'를 표현한다고 가정해보자.
다음과 유사한 정보들이 모여서 게임상의 자동차가 표현되어야 한다.

  소유주
  연료량
  현재속도
  취득점수
  취득아이템

게임 사용자가 게임을 종료하면(로그아웃 화면), 위의 정보는 데이터베이스(또는 파일)에 함께 저장되어야 하며, 다시 게임을 시작하면(로그인 화면), 저장된 위의 정보는 모두 함께 복원되어야 한다.
따라서 이들 정보를 이용해서 다음과 같이 구조체를 정의하면 프로그래밍이 한결 수월해진다.

struct Car
{
    char gamerID[ID_LEN];         // 소유자ID, ID_LEN은 매크로 상수
    int fuelGauge;                // 연료량
    int curSpeed;                 // 현재속도
};

앞서 추출한 정보들 중 '취득점수'와 '취득아이템'을 제외한 나머지를 모두 포함하여 구조체로 정의하였다. 그럼 이어서 이 구조체를 기반으로 간단한 예제를 작성해 보겠다.
그런데 이에 앞서 C++에서의 구조체 변수 선언에 대한 이야기를 조금할 필요가 있다.


[C++에서의 구조체 변수의 선언]

C언어에서 구조체 변수를 선언하는 방법은 다음과 같다.

struct Car basicCar;
struct Car simpleCar;

앞에 삽입된 키워드 struct는 이어서 선언되는 자료형이 구조체를 기반으로 정의된 자료형임을 나타낸다.
그리고 키워드 struct를 생략하려면 별도의 typedef 선언을 추가해야 한다. 하지만 C++에서는 기본 자료형 변수의 선언방식이나 구조체를 기반으로 정의된 자료형의 변수 선언방식에 차이가 ㅇ벗다.
즉, C++에서는 별도의 typedef 선언 없이도 다음과 같이 변수를 선언할 수 있다.

Car basicCar;
Car simpleCar;

그럼 이어서 앞서 정의한 구조체를 기반으로 예제를 작성해보겠다.

ex) RacingCar.cpp
#include <iostream>
using namespace std;

#define ID_LEN 20          // 4 행
#define MAX_SPD 200
#define FUEL_STEP 2
#define ACC_STEP 10
#define BRK_STEP 10        // 8 행

struct Car
{
    char gamerID[ID_LEN];
    int fuelGauge;
    int curSpeed;
};

void ShowCarState(const Car &car)          // 17 행
{
    cout << "소유자ID: " << car.gamerID << endl;
    cout << "연료량: " << car.fuelGauge << '%' << endl;
    cout << "현재속도: " << car.curSpeed << "km/s" << endl << endl;
}

void Accel(Car &car)            // 24 행
{
    if(car.fuelGauge<=0)
        return;
    else
        car.fuelGauge-=FUEL_STEP;
        
    if(car.curSpeed+ACC_STEP >= MAX_SPD)
    {
        car.curSpeed = MAX_SPD;
        return;
    }    
    
    car.curSpeed += ACC_STEP;
}

void Break(Car &car)            // 40 행
{
    if(car.curSpeed <= BRK_STEP)
    {
        car.curSpeed = 0;
        return;
    }    
    
    car.curSpeed -= BRK_STEP;
}

int main(void)
{
    Car run99 = {"run99", 100, 0};              // 53 행
    Accel(run99);                                // 54 행
    Accel(run99);
    ShowCarState(run99);
    Break(run99);
    ShowCarState(run99);                        // 58 행
    
    Car sped77 = {"sped77", 100, 0};
    Accel(sped77);
    Break(sped77);
    ShowCarState(sped77);
    return 0;
}

해설
4 ~ 8 행 : 구조체 Car와 관련된 각종 정보를 상수화 하였다. 각각의 상수가 의미하는 바는 관련 함수를 통해서 이해 가능
17 행 : 차의 정보를 출력하는 기능의 함수이다. 단순히 정보를 출력만하기 때문에 const 참조자를 매개변수로 선언하였다.
24 행 : 차의 가속을 위해서 엑셀을 밟은 상황을 표현해 놓은 함수이다. 엑셀을 밟을 때마다 연료가 줄어들고 스피드가 올라가는 상황을 단순히 표현하였다.
40 행 : 브레이크를 밟은 상황을 표현한 함수. 브레이크도 연료의 소모가 동반되지만, 단순히 속도가 감속하는 것으로 표현.
53 행 : 구조체 변수의 선언 및 초기화가 진행.
45 ~ 58 행 : 엑셀과 브레이크를 밟은 상황을 연출.

결과
소유자ID: run99
연료량: 96%
현재속도: 20km/s

소유자ID: run99
연료량: 96%
현재속도: 10km/s

소유자ID: sped77
연료량: 98%
현재속도: 0km/s

함수는 결국 데이터의 처리를 담당하는 도구이니, 데이터와 함께 부류를 형성하는 것은 매우 당연하다.
따라서 필자는 위에 정의된 세 개의 함수에 대해 다음과 같이 이야기하고자 한다.

'구조체 Car와 함께 부류를 형성하여, Car와 관련된 데이터의 처리를 담당하는 함수들이다.'

따라서 위의 함수들은 구조체 Car에 종속적인 함수들이라고 말할 수 있다. 그럼에도 불구하고 전역함수의 형태를 띠기 때문에,
이 함수들이 구조체 Car에 종속적임을 나타내지 못하는 상황이다. 따라서 엉뚱하게도 다른 영역에서 이 함수를 호출하는 실수를 범할 수 있는 상황이다.


[구조체 안에 함수 삽입하기]

구조체 Car에 종속적인 함수들을 구조체 안에 함께 묶어버리면 어떻겠는가? 그렇게 되면 자동차와 관련된 데이터와 함수를 모두 묶는 셈이 되기 때문에 보다 확실한 구분이 가능하다.
그럼 앞서 보인 예제를 이용해서 필자가 한번 묶어보겠다. C++에서는 구조체 안에 함수를 삽입하는 것을 허용하니 말이다.

struct Car
{
    char gamerID[ID_LEN]
    int fuelGauge;
    int curSpeed;

    void ShowCarState()
    {
        cout << "소유자ID: " << gamerID << endl;
        cout << "연료량: " << fuelGauge << '%' << endl;
        cout << "현재속도: " << curSpeed << "km/s" << endl;
    }

    void Accel()
    {
        if(fuelGauge <= 0)
            return;
        else
            fuelGauge -= FUEL_STEP;
        
        
        if(curSpeed+ACC_STEP <= MAX_STEP)
        {
        curSpeed = MAX_STEP;
        return;
        }
        
        
        curSpeed+=ACC_STEP;
    }

    void Break()
    {
        if(curSpeed < BRK_STEP)
        {
            curSpeed = 0;
            return;
        }
    
        curSpeed -= BRK_STEP;
    }
    
};

구조체 안에 삽입된 함수의 정의에 어떠한 변화가 생겼는지, ShowCarState 함수를 예로 확인해보자.
먼저 다음은 삽입되기 이전의 함수이다.

void ShowCarState(const Car &car)
{
    cout << "소유자ID: " << car.gamerID << endl;
    cout << "연료량: " << car.fuelGauge << '%' << endl;
    cout << "현재속도: " << car.curSpeed << "km/s" << endl;
}

이 함수는 매개변수를 통해서 연산의 대상정보를 받는다. 그리고 함수 내에서도 참조자 car를 대상으로 연산(출력)을 진행한다. 
반면 구조체 안에 삽입된 함수의 정의에는 이들 정보가 존재하지 않는다.

void ShowCarState()
{
    cout << "소유자ID: " << gamerID << endl;
    cout << "연료량: " << fuelGauge << '%' << endl;
    cout << "현재속도: " << curSpeed << "km/s" << endl;
}

이렇듯 연산의 대상에 대한 정보가 불필요한 이유는, 함수가 구조체 내에 삽입되면서 구조체 내에 선언된 변수에 직접접근이 가능해졌기 때문이다.
따라서 다음과 같이 구조체 변수를 각각 선언하면,

Car run99 = {"run99", 100, 0};
Car sped77 = {"sped77", 100, 0};

다음의 형태로 구조체 변수가 생성된다.

책 111페이지 그림 03 - 1

참고로, 위 그림에서는 모든 구조체 변수 내에 함수가 각각 별도로 존재하는 것처럼 묘사해 놨는데, 실제로는 모든 Car 구조체 변수가 하나의 함수를 공유한다.
다만, 논리적으로 각각의 변수가 자신의 함수를 별도로 지니는 것과 같은 효과 및 결과를 보이기 때문에 C++에의 구조체 변수는 위 그림의 형태로 이해하는것이 좋다.
그럼 다음 예제를 확인해보자.

ex) RacingCarFuncAdd.cpp
#include <iostream>
using namespace std;

#define ID_LEN   20
#define MAX_SPD  200
#define FUEL_STEP  2
#define ACC_STEP  10
#define BRK_STEP  10

struct Car						// 10행
{
    char gamerID[ID_LEN];  // 소유자 ID
    int fuelGauge;         // 연료량
    int curSpeed;          // 현재속도

    void ShowCarState()
    {
        cout << "소유자ID: " << gamerID << endl;
        cout << "연료량: " << fuelGauge << '%' << endl;
        cout << "현재속도: " << curSpeed << "km/s" << endl;
    }
    void Accel()
    {
        if(fuelGauge <= 0)
            return;
        else
            fuelGauge -= FUEL_STEP;

        if(fuelGauge+ACC_STEP >= MAX_SPD)
        {
			curSpeed = MAX_SPD;
			return;
		}

		curSpeed += ACC_STEP;
    }
	void Break()
	{
		if(curSpeed < BRK_STEP)
		{
			curSpeed = 0;
			return;
		}

		curSpeed -= BRK_STEP;
	}
};

int main(void)
{
	Car run99 = {"run99", 100, 0};		// 51 행
	run99.Accel();						// 52 행
	run99.Accel();
	run99.ShowCarState();
	run99.Break();
	run99.ShowCarState();

	Car sped77 = {"sped77", 100, 0};		// 58 행
	sped77.Accel();							// 59 행
	sped77.Break();
	sped77.ShowCarState();
}

해설
10 행 : 함수를 멤버로 지니는 구조체의 정의를 보이고 있다. 
51 행 : 초기화의 대상은 함수가 아닌 변수이다. 따라서 함수가 삽입되었어도 초기화의 방법은 달라지지 않는다.
52 : 구조체 run99에 존재하는(존재하는 것으로 이해하자고 했다), Accel 함수를 호출하고 있다. 
구조체 내에 선언된 변수에 접근하는 방법과 동일한 방식으로 함수의 호출이 이뤄진다.
58, 59 행 : 또 다른 구조체 변수를 선언하였다. 그리고 이번에는 이 구조체를 대상으로 Accel 함수를 호출하고 있다.
이렇듯 구조체 내에 함수가 정의되었기 때문에, 구조체 변수를 대상으로 함수의 호출이 이뤄져야 한다.


결과
소유자ID: run99
연료량: 96%
현재속도: 20km/s
소유자ID: run99
연료량: 96%
현재속도: 10km/s
소유자ID: sped77
연료량: 98%
현재속도: 0km/s

그저 구조체 내에 함수를 정의하고 호출한 것뿐이지ㅏㅁㄴ, 이미 우리는 C언어에서 C++로 한참 넘어와버렸다.
// 라고 합니다~ 전 모르겠어요 ㅠ


[구조체 안에 enum 상수의 선언]

예제 RacingCarFuncAdd.cpp 를 보면, 다음의 매크로 상수들이 존재한다.

#define ID_LEN   	20
#define MAX_SPD  	200
#define FUEL_STEP  	2
#define ACC_STEP  	10
#define BRK_STEP 	10

그런데 이들 상수 역시 구조체 Car에게만 의미가 있는 상수들이다. 즉, 다른 영역에서 사용하도록 정의된 상수가 아니니,
이들 상수도 구조체 내에 포함시키는 것이 좋을 수 있다.(상황마다 조금씩 달라질 수 있으므로, 약간 소극적인 표현 사용)
따라서 이러한 경우에는 열거형 enum을 이용해서 다음과 같이 구조체 내에서만 유효한 상수를 정의하면 된다.

struct Car
{
	enum
	{
		ID_LEN = 20,
		MAX_SPD = 200,
		FUEL_STEP = 2,
		ACC_STEP = 10,
		BRK_STEP = 10
	};

	char gamerID[ID_LEN];
	int fuelGauge;
	int curSpeed;

	void ShowCarState() { ... }
	void Accel() { ... }
	void Break() { ... }
};

열거형에 대해서는 이미 C언어를 통해서 공부하였으니, 추가적인 설명은 생략하겠다..(난 몰라.. C언어 공부해야겠네..)
참고로 enum의 선언을 구조체 내부에 삽입하는 것이 부담스럽다면, 이름공간을 이용해서 상수가 사용되는 영역을 명시하는 것도 또 다른 방법이 될 수 있다.
그리고 이렇게 이름공간을 이요하면, 몇몇 구조체들 사이에서만 사용하는 상수들을 선언할 때 특히 도움이 되며, 위에서 보인 방법보다 가독성도 좋아지는 경향이 이싿.
그럼 예제를 통해서 이 방법을 알아보자.

ex) RacingCarEnum.cpp
#include <iostream>
using namespace std;

namespace CAR_CONST				// 4 행
{
	enum
	{
		ID_LEN = 20,
		MAX_SPD = 200,
		FUEL_STEP = 2,
		ACC_STEP = 10,
		BRK_STEP = 10
	};
}								// 14 행

struct Car
{
    char gamerID[CAR_CONST::ID_LEN];  // 소유자 ID				// 18 행
    int fuelGauge;         // 연료량
    int curSpeed;          // 현재속도

    void ShowCarState()
    {
        cout << "소유자ID: " << gamerID << endl;
        cout << "연료량: " << fuelGauge << '%' << endl;
        cout << "현재속도: " << curSpeed << "km/s" << endl;
    }
	void Accel()
	{
		if(fuelGauge <= 0)
			return;
		else
			fuelGauge -= CAR_CONST::FUEL_STEP;

		if((curSpeed+CAR_CONST::ACC_STEP) > CAR_CONST::MAX_SPD)
		{
			curSpeed = CAR_CONST::MAX_SPD;
			return;
		}

		curSpeed += CAR_CONST::ACC_STEP;
	}
	void Break()
	{
		if(curSpeed < CAR_CONST::BRK_STEP)
		{
			curSpeed = 0;
			return;
		}

		curSpeed -= CAR_CONST::BRK_STEP;
	}
};

int main(void)
{
	Car run99 = {"run99", 100, 0};		// 51 행
	run99.Accel();						// 52 행
	run99.Accel();
	run99.ShowCarState();
	run99.Break();
	run99.ShowCarState();

	Car sped77 = {"sped77", 100, 0};		// 58 행
	sped77.Accel();							// 59 행
	sped77.Break();
	sped77.ShowCarState();
}

해설
4 ~ 14 행 : CAR_CONST 이름공간 안에 구조체 Car에서 사용하는 상수들을 모두 모아놓았다.
18 행 : 상수 ID_LEN의 접근을 위해서 이름공간 CAR_CONST를 지정하고 있다. 이렇듯 이름공간을 지정해서 코드를 작성했기 때문에,
이 문장만 봐도 이 상수가 어느 영역에서 선언되고 사용되는 사웃인지 수비게 알 수 있다. 그래서 가독성이 좋아졌다.

결과
소유자ID: run99
연료량: 96%
현재속도: 20km/s
소유자ID: run99
연료량: 96%
현재속도: 10km/s
소유자ID: sped77
연료량: 98%
현재속도: 0km/s

그저 구조체 내에 함수를 정의했을 뿐인데도 느낌이 많이 달라졌다는 생각이 들 것이다. 그런데, 구조체 안에 모두 넣어버렸더니, 구조체가 너무 커져버렸다.


[함수는 외부로 뺄 수 있다.]

함수가 포함되어 있는 C++의 구조체를 보는 순간, 다음의 정보들이 쉽게 눈에 들어와야 코드의 분석이 용이하다.

선언되어 있는 변수정보
정의되어 있는 변수정보

보통 프로그램을 분석할 때, 흐름 및 골격 위주로 분석하는 경우가 많다. 그리고 이러한 경우에는 함수의 기능만 파악을 하지, 함수의 세부구현까지 신경을 쓰지는 않는다.
따라서 구조체를 보는순간., 정의되어 잇는 함수의 종류와 기능이 한눈에 들어오게끔 코드를 작성하는 것이 좋다.
따라서 구조체 내에 정의된 함수의 수가 많거나 그 길이가 길다면, 다음과 같이 구조체 밖으로 함수를 빼낼 필요가 있다.

struct Car
{
	.....
	void ShowCarState();
	void Accel();
	.....
};

void Car::ShowCarState()
{
	.....
}
void Car::Accel()
{
	.....
}

즉, 함수의 원형선언을 구조체 안에 두고, 함수의 정의를 구조체 박으로 빼내는 것이다. 다만, 빼낸 다음에 해당 함수가 어디에 정의되어 있는지에 대한 정보만 추가해주면 된다.
그럼 이런 형태로 예제를 변경해보자.

ex) RacingCarOuterFunc.cpp
#include <iostream>
using namespace std;

namespace CAR_CONST
{
	enum
	{
		ID_LEN = 20,
		MAX_SPD = 200,
		FUEL_STEP = 2,
		ACC_STEP = 10,
		BRK_STEP = 10
	};
}

struct Car
{
    char gamerID[CAR_CONST::ID_LEN];  // 소유자 ID				// 18 행
    int fuelGauge;         // 연료량
    int curSpeed;          // 현재속도

	void ShowCarState();		// 22 행
	void Accel();
	void Break();				// 24 행
};

void Car::ShowCarState()		// 27 행
{
	cout << "소유자ID: " << gamerID << endl;
    cout << "연료량: " << fuelGauge << '%' << endl;
    cout << "현재속도: " << curSpeed << "km/s" << endl << endl;
}
void Car::Accel()				// 33 행
{
	if(fuelGauge <= 0)
		return;
	else
		fuelGauge -= CAR_CONST::FUEL_STEP;

	if((curSpeed+CAR_CONST::ACC_STEP) > CAR_CONST::MAX_SPD)
	{
		curSpeed = CAR_CONST::MAX_SPD;
		return;
	}
	curSpeed += CAR_CONST::ACC_STEP;
}
void Car::Break()				// 48 행
{
	if(curSpeed < CAR_CONST::BRK_STEP)
	{
		curSpeed = 0;
		return;
	}
	curSpeed -= CAR_CONST::BRK_STEP;
}

int main(void)
{
	Car run99 = {"run99", 100, 0};
	run99.Accel();
	run99.ShowCarState();
	run99.Break();
	run99.ShowCarState();
	return 0;
}


해설
22 ~ 24 행 : 구조체 안에 함수의 원형만 남으니, 함수의 종류가 한눈에 들어오고, 적절한 주석을 통해서 함수의 기능도 쉽게 판단이 된다.
27, 33, 48 행 : 원래 속하는 구조체의 이름을 명시하면서 구조체 밖으로 함수의 정의가 빠져나왔다.

결과
소유자ID: run99
연료량: 98%
현재속도: 10km/s

소유자ID: run99
연료량: 98%
현재속도: 0km/s

앞서 언급하진 않았지만, 사실 구조체 안에 함수가 정의되어 있으면, 다음의 의미가 더불어 내포된다.

함수를 인라인으로 처래해라

반면, 위의 예제와 같이 함수를 구조체 밖으로 빼내면, 이러한 의미가 사라진다. 따라서 인라인의 의미를 그대로 유지하려면 다음과 같이 키워드 inline을 이용해서 인라인 처리를 명시적으로 지시해야 한다.

inline void Car::ShowCarState() { .... }
inline void Car::Accel() { .... }
inline void Car::Break() { .... }

이로써 C++에서의 구조체에 대한 설명이 일단락되어싿. 그런데 C++에서의 구조체는 잠시 후에 설명하는 클래스의 일조으로 간주된다.
그래서 구조체 안에 함수를 저의할 수 잇었던 것이다. 즉, 위에서 정의한 구조체를 가리켜 그냥 '클래스'라고 표현해도 틀리지 않는다.
