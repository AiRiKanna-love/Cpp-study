2024/12/07

['참'을 의미하는 true와 '거짓'을 의미하는 false]
C와 C++ 모두, 정수 0은 '거짓'을 의맣는 숫자로, 그리고 0이 아닌 모든 정수는 '참'을 의미하는 숫자로 정의하고 있다.
따라서 참과 거짓의 표현을 위해서 다음과 같이 상수를 정의하는 것이 보통이다.

#define TRUE 1
#define FALSE 0

참과 거짓을 표현을 위한 키워드 true와 false를 정의하고 있기 때문에, 굳이 매크로 상수를 이용해서 참과 거짓을 표현할 필요가 없다.
다음 예제를 보이는 바와 같이 논리적인 의미의 차과 거짓이 필요한 위치에서는 키워드 true와 false를 사용할 수 있기 때문이다.

ex) TrueAndFalse.cpp

#include <iostream>
using namespace std;

int main(void)
{
    int num = 10;
    int i = 0;

    cout << "true : " << true << endl;    // 9행
    cout << "flase : " << flase << endl;    // 10행

    while(true)    // 12행
    {
        cout << i++ << ' ';
        if(i<num)
          break;
      
    }
    cout << endl;

    cout << "sizeof 1 : " << sizeof(1) << endl;    // 20행
    cout << "sizeof 0 : " << sizeof(0) << endl;    // 21행
    cout << "sizeof true : " << sizeof(true) << endl;    // 22행
    cout << "sizeof false : " << sizeof(false) << endl;    // 23행
    return 0;
}

해설
9, 10 행 : 키워드 true와 false를 콘솔에 출력핼을 때의 출력내용을 확인하기 위한 문장
12 행 : C언어에서는 무한루프를 형성하기 위해서 일반적으로 숫자 1을 사용한다.
        C++에서도 물론 숫자 1을 사용할 수 있지만, 이렇게 true를 사용할 수도 있다.
20, 21 행 : 상수 1과 상수 0의 데이터 크기를 확인하기 위한 문장
22, 23 행 : 참과 거짓을 의미하는 데이터 true와 false의 데이터 크기를 확인하기 위한 문장
(sizeof는 데이터 크기를 표시하기에 1과 0은 int형 크기의 4
  true와 false는 1byte를 쓰기에 1이 표시된다.)

결과
true : 1
false : 0
0 1 2 3 4 5 6 7 8 9 10
sizeof 1 : 4
sizeof 0 : 4
sizeof true : 1
sizeof false : 1

위 예제의 실행결과를 통해서 다음과 같은 잘못된 오해를 하면 안 된다.

'true와 false는 각각 1과 0을 의미하는 키워드 이다'

그런데 true는 1이 아니며, false 역시 0이 아니다. 이 둘은 '참'과 '거짓'을 표현하기 위한 1byte 크기의 데이터일 뿐이다.
다만, true와 false 가 정의됙 이전에는 참을 표현하기 위해서 숫자 1을, 거짓을 표현하기 위해서 숫자 0을 사용했기 때문에,
이 둘을 출력하거나 정수의 형태로 형 변환하는 경우에 각각 1과 0으로 변환되도록 정의되어 있을 뿐이다.
그래서 위 예제에서도 true와 false를 출력하는 경우에 각각 1과 0이 출력되었으며, 다음과 같이 정수가 와야 할 위치에 true와 false가 오는
경우에도 각각 1과 0으로 변환이 된다.

int num1 = true;  // num1 에는 1이 저장
int num2 = false;  // num2 에는 0이 저장
int num3 = true + false;  // num3 에는 1 + 0;

따라서 true와 false를 굳이 숫자에 연결시켜서 이해하려 들지 않았으면 좋겠다.
true와 false는 그 자체를 '참'과 '거짓'을 나타내는 목적으로 정의된 데이터로 인식하자.

[자료형 bool]

true와 false는 그 자체로 참과 거짓을 의미하는 데이터이기 때문에, 이들 데이터의 저장을 위한 자료형이 별도로 정의되어 있다.
true와 false를 가리켜 bool형 데이터라 한다. 그리고 bool은 int, double과 마찬가지로 기본자료형의 하나이기 때문에 다음과
같이 bool형 변수를 선언하는 것이 가능하다.

bool isTrueOne = true;
bool isTrueTwo = false;

예제를 통해서  bool형이 어떻게 사용되는지 봐보자.

ex) DataTypeBool.cpp

#include <iostream>
using namespace std;

bool IsPositive(int num)    // 4행
{
    if(num<=0)
      return flase;
    else
      return true;
}

int main(void)
{
    bool isPos;      // 14행
    int num;
    cout << "Input number : ";
    cin >> num;

    isPos = IsPositive(num);    // 19행
    if(isPos)
      cout << "Positive number" << endl;
    else
      cout << "Negative number" << endl;

    return 0;
}

해설
4 행 : bool도 기본자료형이기 때문에 함수의 반환형으로도 선언이 가능하다.
14, 19 행 : bool형 변수를 선언해서 함수 IsPositive가 반환하는 bool형 데이터를 저장하고 있다.

결과
Input number : 12 // 키보드로 받은 수
Positive number
// 0보다 크기에 true 리턴, isPos에 1을 받고 참으로 Positive number 출력
필자는 위 예제를 통해서 bool도 기본자료형의 하나이니, 다른 기본자료형과 동일한 방식으로 사용할 수 있음을 보이고자 하였다.
